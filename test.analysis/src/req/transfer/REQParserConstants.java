/* Generated By:JJTree&JavaCC: Do not edit this line. REQParserConstants.java */
/*
 * This software is licensed under the terms of the ISC License.
 * (ISCL http://www.opensource.org/licenses/isc-license.txt
 * It is functionally equivalent to the 2-clause BSD licence,
 * with language "made unnecessary by the Berne convention" removed).
 *
 * Copyright (c) 2011-2013 Mike Norman
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
 * USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 ******************************************************************************/
package req.transfer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface REQParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int REQ = 6;
  /** RegularExpression Id. */
  int RSP = 7;
  /** RegularExpression Id. */
  int BUILTIN = 8;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 9;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 10;
  /** RegularExpression Id. */
  int HEX_LITERAL = 11;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 12;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 13;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 14;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 15;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 16;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 17;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 18;
  /** RegularExpression Id. */
  int STRING_LITERAL = 19;
  /** RegularExpression Id. */
  int IDENTIFIER = 20;
  /** RegularExpression Id. */
  int LETTER = 21;
  /** RegularExpression Id. */
  int PART_LETTER = 22;
  /** RegularExpression Id. */
  int LPAREN = 23;
  /** RegularExpression Id. */
  int RPAREN = 24;
  /** RegularExpression Id. */
  int LBRACE = 25;
  /** RegularExpression Id. */
  int RBRACE = 26;
  /** RegularExpression Id. */
  int LBRACKET = 27;
  /** RegularExpression Id. */
  int RBRACKET = 28;
  /** RegularExpression Id. */
  int SEMICOLON = 29;
  /** RegularExpression Id. */
  int COMMA = 30;
  /** RegularExpression Id. */
  int DOT = 31;
  /** RegularExpression Id. */
  int AT = 32;
  /** RegularExpression Id. */
  int ASSIGN = 33;
  /** RegularExpression Id. */
  int LT = 34;
  /** RegularExpression Id. */
  int BANG = 35;
  /** RegularExpression Id. */
  int TILDE = 36;
  /** RegularExpression Id. */
  int HOOK = 37;
  /** RegularExpression Id. */
  int COLON = 38;
  /** RegularExpression Id. */
  int EQ = 39;
  /** RegularExpression Id. */
  int LE = 40;
  /** RegularExpression Id. */
  int GE = 41;
  /** RegularExpression Id. */
  int NE = 42;
  /** RegularExpression Id. */
  int SC_OR = 43;
  /** RegularExpression Id. */
  int SC_AND = 44;
  /** RegularExpression Id. */
  int INCR = 45;
  /** RegularExpression Id. */
  int DECR = 46;
  /** RegularExpression Id. */
  int PLUS = 47;
  /** RegularExpression Id. */
  int MINUS = 48;
  /** RegularExpression Id. */
  int STAR = 49;
  /** RegularExpression Id. */
  int SLASH = 50;
  /** RegularExpression Id. */
  int BIT_AND = 51;
  /** RegularExpression Id. */
  int BIT_OR = 52;
  /** RegularExpression Id. */
  int XOR = 53;
  /** RegularExpression Id. */
  int REM = 54;
  /** RegularExpression Id. */
  int LSHIFT = 55;
  /** RegularExpression Id. */
  int PLUSASSIGN = 56;
  /** RegularExpression Id. */
  int MINUSASSIGN = 57;
  /** RegularExpression Id. */
  int STARASSIGN = 58;
  /** RegularExpression Id. */
  int SLASHASSIGN = 59;
  /** RegularExpression Id. */
  int ANDASSIGN = 60;
  /** RegularExpression Id. */
  int ORASSIGN = 61;
  /** RegularExpression Id. */
  int XORASSIGN = 62;
  /** RegularExpression Id. */
  int REMASSIGN = 63;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 64;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 65;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 66;
  /** RegularExpression Id. */
  int ELLIPSIS = 67;
  /** RegularExpression Id. */
  int LAMBDA = 68;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"__REQ__\"",
    "\"__RSP__\"",
    "\"__BUILTIN__\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\"->\"",
    "\".toString()\"",
    "\".toInt()\"",
  };

}
